#!/usr/bin/env ruby
#
$:.unshift(File.dirname(__FILE__))
require 'rubygems'
require 'snorby_suite'
require 'optparse'

options = {}
options[:pcap] = false

optparse = OptionParser.new do |opts|
  opts.banner = "Alert Daemon (Version #{SnorbySuite::VERSION} )"  
  opts.separator "Usage: #$0 [options]"
  # Optional argument with keyword completion.
  opts.on("--sensor [NAME]", SnorbySuite::SENSORS.sample,
    "Select a Sensor (#{SnorbySuite::SENSORS.join(', ')})") do |t|
     options[:sensor] = t
  end
  opts.on("--pcap [NAME]", 
    "Use random pcap from sample file library (#{SnorbySuite::PCAPSAMPLEPATH})") do |t| 
     options[:pcap] = t 
  end 

  opts.on_tail( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

#Verify the options
begin
  raise unless ARGV.size > 0
  optparse.parse!
  
#If options fail display help
rescue
  puts optparse
  exit
end

factory = SnorbySuite::Pcapfactory.new


def pcapfile(location)
  return Dir.glob(location + '/*.pcap').sample if location
end

loop do

  if not options[:pcap]
    factory.filename = "/tmp/pcapfactory.pcap.#{$$}"
    #puts "Regenerating pcap file '#{factory.filename}' .."
    factory.generate
    factory.write_pcaps
  
    puts "Running Snort.. #{factory.filename}"
    `snort -r #{factory.filename} -S U2EXT=#{options[:sensor]} -c #{SnorbySuite::SNORTCONF} -l #{SnorbySuite::UNIFIEDDIR} -q`
    puts "Closing Snort."
  
    sleep(15)
    factory.flush
  else
    snort_pcapfile = pcapfile(options[:pcap])
    puts "Running Snort.. #{snort_pcapfile}"
    `snort -r #{snort_pcapfile} -S U2EXT=#{options[:sensor]} -c #{SnorbySuite::SNORTCONF} -l #{SnorbySuite::UNIFIEDDIR} -q`
    puts "Closing Snort."
  
    sleep(15)
  end  
end


